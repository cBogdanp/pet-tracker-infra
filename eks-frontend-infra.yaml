AWSTemplateFormatVersion: '2010-09-09'
Description: AWS CloudFormation template to create an EKS cluster with working NodeGroup for micro-frontend

Parameters:
  ClusterName:
    Type: String
    Default: frontend-micro-frontend-cluster
  NodeInstanceType:
    Type: String
    Default: t3.medium
  DesiredCapacity:
    Type: Number
    Default: 2
  MaxSize:
    Type: Number
    Default: 3
  MinSize:
    Type: Number
    Default: 1

Resources:

  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: eks-vpc

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: eks-igw

  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: public-route-table

  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.1.0/24
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: eks-public-subnet-1
        - Key: kubernetes.io/cluster/!Ref ClusterName
          Value: owned

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.2.0/24
      AvailabilityZone: !Select [ 1, !GetAZs '' ]
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: eks-public-subnet-2
        - Key: kubernetes.io/cluster/!Ref ClusterName
          Value: owned

  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicRouteTable

  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref PublicRouteTable

  EKSClusterRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - eks.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonEKSClusterPolicy

  EKSNodeGroupRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonEKSWorkerNodePolicy
        - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly
        - arn:aws:iam::aws:policy/AmazonEKS_CNI_Policy

  NodeSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: EKS worker node security group
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: eks-node-sg
      SecurityGroupIngress:
        # Allow all traffic from nodes themselves (node-to-node communication)
        - IpProtocol: -1
          FromPort: 0
          ToPort: 65535
          SourceSecurityGroupId: !Ref NodeSecurityGroup
      SecurityGroupEgress:
        # Allow all outbound traffic (required for internet access, pulling images)
        - IpProtocol: -1
          FromPort: 0
          ToPort: 65535
          CidrIp: 0.0.0.0/0

  EKSCluster:
    Type: AWS::EKS::Cluster
    Properties:
      Name: !Ref ClusterName
      RoleArn: !GetAtt EKSClusterRole.Arn
      ResourcesVpcConfig:
        SubnetIds:
          - !Ref PublicSubnet1
          - !Ref PublicSubnet2
        SecurityGroupIds:
          - !Ref NodeSecurityGroup

  NodeGroup:
    Type: AWS::EKS::Nodegroup
    Properties:
      ClusterName: !Ref EKSCluster
      NodegroupName: !Sub "${ClusterName}-node-group"
      ScalingConfig:
        DesiredSize: !Ref DesiredCapacity
        MaxSize: !Ref MaxSize
        MinSize: !Ref MinSize
      Subnets:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
      InstanceTypes:
        - !Ref NodeInstanceType
      NodeRole: !GetAtt EKSNodeGroupRole.Arn
      AmiType: AL2_x86_64
      DiskSize: 20

Outputs:
  EKSClusterName:
    Description: Name of the EKS cluster
    Value: !Ref EKSCluster

  EKSNodeGroupName:
    Description: Name of the EKS node group
    Value: !Ref NodeGroup

  VPCId:
    Description: VPC Id
    Value: !Ref VPC

  PublicSubnet1Id:
    Description: Public Subnet 1 Id
    Value: !Ref PublicSubnet1

  PublicSubnet2Id:
    Description: Public Subnet 2 Id
    Value: !Ref PublicSubnet2

  NodeSecurityGroupId:
    Description: Security group Id attached to nodes
    Value: !Ref NodeSecurityGroup